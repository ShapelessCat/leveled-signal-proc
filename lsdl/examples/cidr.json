{
    "schema": {
        "type_name": "InputSignalBag",
        "members": {
            "player_state": {
                "type": "String",
                "clock_companion": "player_state_clock",
                "input_key": "newPlayerState"
            },
            "network": {
                "type": "String",
                "clock_companion": "network_clock",
                "input_key": "newNetwork"
            },
            "cdn": {
                "type": "String",
                "clock_companion": "cdn_clock",
                "input_key": "newCdn"
            },
            "user_action": {
                "type": "String",
                "clock_companion": "user_action_clock",
                "input_key": "newUserAction"
            }
        }
    },
    "nodes": [
        {
            "id": 0,
            "is_measurement": false,
            "node_decl": "SignalMapper::new(|lhs:&String| *lhs == \"play\")",
            "upstreams": [
                {
                    "type": "InputSignal",
                    "id": "user_action"
                }
            ],
            "package": "lsp-component",
            "namespace": "lsp_component::processors::SignalMapper"
        },
        {
            "id": 1,
            "is_measurement": false,
            "node_decl": "Latch::<bool>::default()",
            "upstreams": [
                {
                    "type": "Component",
                    "id": 0
                },
                {
                    "type": "Constant",
                    "value": "true",
                    "type_name": "bool"
                }
            ],
            "package": "lsp-component",
            "namespace": "lsp_component::processors::Latch"
        },
        {
            "id": 2,
            "is_measurement": false,
            "node_decl": "SignalMapper::new(|lhs:&String| *lhs == \"seek\")",
            "upstreams": [
                {
                    "type": "InputSignal",
                    "id": "user_action"
                }
            ],
            "package": "lsp-component",
            "namespace": "lsp_component::processors::SignalMapper"
        },
        {
            "id": 3,
            "is_measurement": false,
            "node_decl": "Latch::with_forget_behavior(<bool as Default>::default(), <bool as Default>::default(), 5000000000)",
            "upstreams": [
                {
                    "type": "Component",
                    "id": 2
                },
                {
                    "type": "Constant",
                    "value": "true",
                    "type_name": "bool"
                }
            ],
            "package": "lsp-component",
            "namespace": "lsp_component::processors::Latch"
        },
        {
            "id": 4,
            "is_measurement": false,
            "node_decl": "SignalMapper::new(|lhs:&_| *lhs ^ true)",
            "upstreams": [
                {
                    "type": "Component",
                    "id": 3
                }
            ],
            "package": "lsp-component",
            "namespace": "lsp_component::processors::SignalMapper"
        },
        {
            "id": 5,
            "is_measurement": false,
            "node_decl": "SignalMapper::new(|(lhs, rhs):&(_,_)| *lhs && *rhs)",
            "upstreams": [
                {
                    "type": "Tuple",
                    "values": [
                        {
                            "type": "Component",
                            "id": 1
                        },
                        {
                            "type": "Component",
                            "id": 4
                        }
                    ]
                }
            ],
            "package": "lsp-component",
            "namespace": "lsp_component::processors::SignalMapper"
        },
        {
            "id": 6,
            "is_measurement": false,
            "node_decl": "SignalMapper::new(|lhs:&String| *lhs == \"buffer\")",
            "upstreams": [
                {
                    "type": "InputSignal",
                    "id": "player_state"
                }
            ],
            "package": "lsp-component",
            "namespace": "lsp_component::processors::SignalMapper"
        },
        {
            "id": 7,
            "is_measurement": false,
            "node_decl": "SignalMapper::new(|(lhs, rhs):&(_,_)| *lhs && *rhs)",
            "upstreams": [
                {
                    "type": "Tuple",
                    "values": [
                        {
                            "type": "Component",
                            "id": 5
                        },
                        {
                            "type": "Component",
                            "id": 6
                        }
                    ]
                }
            ],
            "package": "lsp-component",
            "namespace": "lsp_component::processors::SignalMapper"
        },
        {
            "id": 8,
            "is_measurement": false,
            "node_decl": "SignalMapper::new(|lhs:&String| *lhs == \"cdn1\")",
            "upstreams": [
                {
                    "type": "InputSignal",
                    "id": "cdn"
                }
            ],
            "package": "lsp-component",
            "namespace": "lsp_component::processors::SignalMapper"
        },
        {
            "id": 9,
            "is_measurement": false,
            "node_decl": "SignalMapper::new(|(lhs, rhs):&(_,_)| *lhs && *rhs)",
            "upstreams": [
                {
                    "type": "Tuple",
                    "values": [
                        {
                            "type": "Component",
                            "id": 7
                        },
                        {
                            "type": "Component",
                            "id": 8
                        }
                    ]
                }
            ],
            "package": "lsp-component",
            "namespace": "lsp_component::processors::SignalMapper"
        },
        {
            "id": 10,
            "is_measurement": true,
            "node_decl": "DurationTrue::default()",
            "upstreams": [
                {
                    "type": "Component",
                    "id": 9
                }
            ],
            "package": "lsp-component",
            "namespace": "lsp_component::measurements::DurationTrue"
        }
    ],
    "measurement_policy": {
        "measure_at_event_filter": "|_| true",
        "measure_periodically_interval": -1,
        "metrics_drain": "json",
        "output_schema": {
            "totalTime": {
                "type": "Component",
                "id": 10
            }
        }
    }
}
